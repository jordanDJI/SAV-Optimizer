from datetime import datetime, timedelta
import re
import os

# Liste de mots-cl√©s par gravit√©
CRITICAL_KEYWORDS = ["urgent", "aucune connexion", "plus d‚Äôinternet", "en panne", "bloqu√©", "bug", "rien ne marche"]
THREAT_KEYWORDS = ["inadmissible", "je vais r√©silier", "honteux", "inacceptable"]
SPAM_PATTERN = r"^[#\sü´†ü§°üî•üåàüíÄüòÇ‚ù§Ô∏è]*$"

# Seuils pour surcharge
MAX_PENDING_REQUESTS = 100  # au-del√† = surcharge

def detect_critical_keywords(text: str, keywords: list[str]) -> bool:
    return any(kw.lower() in text.lower() for kw in keywords)

def is_spam(text: str) -> bool:
    return re.fullmatch(SPAM_PATTERN, text.strip()) is not None

def calculate_priority(message: dict, pending_volume: int = 0) -> str:
    """
    message = {
        'text': str,
        'sentiment': 'positif' | 'neutre' | 'n√©gatif',
        'category': str,
        'created_at': datetime
    }
    """
    text = message.get("text", "")
    sentiment = message.get("sentiment")
    category = message.get("category")
    created_at = message.get("created_at", datetime.now())

    # Cas 1 : Message vide ou spam
    if not text.strip() or is_spam(text):
        return "aucune"

    # Cas 2 : Probl√®me technique urgent
    if category == "probl√®me technique":
        if detect_critical_keywords(text, CRITICAL_KEYWORDS):
            if datetime.now() - created_at > timedelta(hours=1):
                return "critique"
            return "√©lev√©e"

    # Cas 3 : Plainte √©motionnelle
    if category == "plainte" and sentiment == "n√©gatif":
        if detect_critical_keywords(text, THREAT_KEYWORDS):
            return "√©lev√©e"

    # Cas 4 : Suggestion ou remerciement
    if category == "suggestion" or sentiment == "positif":
        return "moyenne"

    # Cas 5 : Question simple ou neutre
    if category in ["question", "information"] or sentiment == "neutre":
        return "faible"

    # Cas 6 : Langue inconnue ou inclassifiable
    if category == "non classifiable":
        return "aucune"

    # Cas par d√©faut
    priority = "faible"

    # Cas 7 : Surcharge ‚Üí Priorisation dynamique
    if pending_volume > MAX_PENDING_REQUESTS:
        if priority in ["faible", "moyenne"]:
            return "diff√©r√©e"
        return priority

    return priority



# Tests unitaires
from datetime import datetime, timedelta

message = {
    "text": "Plus d‚Äôinternet depuis 4h, c‚Äôest inadmissible !!",
    "sentiment": "n√©gatif",
    "category": "probl√®me technique",
    "created_at": datetime.now() - timedelta(hours=4)
}

priority = calculate_priority(message, pending_volume=110)
print(f"Priorit√© : {priority}")  # ‚ûú Priorit√© : critique.
